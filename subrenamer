#!/usr/bin/env bash

#=== SH_SCRIPT  ================================================================
#         NAME:   SubRenamer
#  DESCRIPTION:   A script to change sub filenames accordingly to video files
#         DATE:   2022/07/16
#===============================================================================

# e - script stops on error (any internal or external return !=0)
# u - error if undefined variable
# o pipefail - script fails if one of piped command fails
# x - output each line (debug)
set -euo pipefail


#-----------------------------------------------------------------------
#  Global settings
#-----------------------------------------------------------------------
SCRIPT_VERSION="0.1"
SHORT_DESCRIPTION="A script to change sub filenames accordingly to video files"
SCRIPT_NAME="SubRenamer"

VIDEO_FORMATS=( "mkv" "mp4" "avi" )
DEPENDENCIES=( "find" "sort" "sed" "grep" "mapfile" )

# Get the real script filename even through a symbolic link
SCRIPT_RUN="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"

#----------------------------------------
# Terminal output font styles and colors
GREEN="\033[0;32m"
NS="\033[0m" # No style
BLD="\e[1m"  # Bold text style
ITL="\e[3m"  # Italic text style

F_OK="${GREEN}${BLD}OK${NS}"
F_ERR="\e[0;31m"
F_SCR="\033[1;36m\e[1m${SCRIPT_RUN}:${NS} ${ITL}"
F_WAR="\033[0;33m\e[3m"
F_SEP="$GREEN===============$NS"


#-----------------------------------------------------------------------
# Check dependencies
#-----------------------------------------------------------------------
missing_deps=0
for dependency in "${DEPENDENCIES[@]}"; do
    if ! command -v "$dependency" > /dev/null 2>&1 ; then
        echo -e "$F_ERR$SCRIPT_RUN: Could't find '$dependency' on the system."\
                "Check if is installed.$NS"
        ((++missing_deps))
    fi
done
if [[ $missing_deps -gt 0 ]]; then
    exit 1
fi



#===  FUNCTION  ================================================================
#         NAME:   Version
#  DESCRIPTION:   Show script name, script version and short description.
#===============================================================================
function version()
{
    echo -e "$BLD$SCRIPT_NAME v$SCRIPT_VERSION$NS"
    echo -e "$ITL$SHORT_DESCRIPTION$NS\n"
}  # ------------  end of function version  ------------



#===  FUNCTION  ================================================================
#         NAME:   Help
#  DESCRIPTION:   Show the script usage and documentation help.
#===============================================================================
function help()
{
    echo -e "Usage: $SCRIPT_RUN [OPTION]... [FILE]
       $SCRIPT_RUN [OPTION]... [FILE] [OUTFILE]

Options:
  -o|option        Description.
  -h|help          Display this help message.
  -v|version       Display the version of $SCRIPT_NAME and exit."

}  # ------------  end of function help  ------------



#-------------------------------------------------------------------------------
#  Global variables
#-------------------------------------------------------------------------------

file_list=""
video_list=()
sub_list=()

video_count=0
subtitle_count=0


#-------------------------------------------------------------------------------
#  Handle command line arguments
#-------------------------------------------------------------------------------
while getopts ":hv" opt
    do
        case $opt in
            h|help)
                version
                help
                exit 0
                ;;
            v|version)
                version
                exit 0
                ;;
            :)
                echo -e "$F_ERR$SCRIPT_NAME: Invalid option: '-$OPTARG'" \
                        "requires an argument. Check '-help'.$NS"
                exit 1
                ;;
            *)
                echo -e "$F_ERR$SCRIPT_NAME: Invalid option: '-$OPTARG'." \
                        "Check '-help'.$NS"
                exit 1
                ;;
    esac
done
shift $((OPTIND-1))



#===  FUNCTION  ================================================================
#         NAME:   Get files
#  DESCRIPTION:   Get a list of current files on dir and store it as a array.
#===============================================================================
function get_files()
{
    echo -en "${F_SCR}Building the file list... "
    file_list=$(find . -mindepth 1 -maxdepth 1)
    echo -e "$F_OK"

}  # ------------  end of function get_files  ------------



#===  FUNCTION  ================================================================
#         NAME:   Get video files
#  DESCRIPTION:   
#===============================================================================
function get_video_files()
{
    echo -en "${F_SCR}Getting videos from the list... "
    local video_list_raw

    for (( i=0; i<${#VIDEO_FORMATS[@]}; i++ )); do
        # Get videos by extension from file_list
        video_list_raw=$(grep "\.${VIDEO_FORMATS[i]}$" <<< "$file_list" || true)
        if [[ -n $video_list_raw ]]; then
            # Remove ./ from the files
            video_list_raw=$(sed "s|\./||g" <<< "$video_list_raw")
            # Sort
            video_list_raw=$(sort <<< "$video_list_raw")
            # Convert into an array
            mapfile -t video_list <<< "$video_list_raw"
            break
        fi
    done

    if [[ -z ${video_list[0]} ]]; then
        echo -e "\n${F_ERR}${SCRIPT_RUN}: No video file found."
        exit 255
    fi

    echo -e "$F_OK"

}  # ------------  end of function get_video_files  ------------


#===  FUNCTION  ================================================================
#         NAME:   Get srt files
#  DESCRIPTION:   Get srt files from file_list
#===============================================================================
function get_srt_files()
{
    echo -en "${F_SCR}Getting subtitles from the list... "
    local sub_list_raw

    # Get srt files from file_list
    sub_list_raw=$(grep "\.srt$" <<< "$file_list" || true)
    # Remove ./ from files
    sub_list_raw=$(sed "s|\./||g" <<< "$sub_list_raw")
    # Sort
    sub_list_raw=$(sort <<< "$sub_list_raw")

    # Convert into an array
    mapfile -t sub_list <<< "$sub_list_raw"

    if [[ -z ${sub_list[0]} ]]; then
        echo -e "\n${F_ERR}${SCRIPT_RUN}: No subtitle file found"
        exit 255
    fi

    echo -e "$F_OK"

}  # ------------  end of function get_srt_files  ------------



#===  FUNCTION  ================================================================
#         NAME:   Rename subtitles in current folder
#  DESCRIPTION:   Renam subtitles in current folder based on video list
#===============================================================================
function rename_subtitles_in_current_folder()
{
    echo -e "${F_SCR}The following files will be renamed:"

    local name=""
    for (( i=0; i<${#sub_list[@]}; i++ )); do
        name=${video_list[i]%.*}
        echo -e "            ${ITL}'${sub_list[i]}' to '${name}.srt'"
    done

    echo -en "${F_WAR}Confirm the changes? $NS"
    read -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${F_SCR}Quiting..." 
        exit 0
    fi

    echo -en "${F_SCR}Confirmed. Renaming the subtitles... "

    for (( i=0; i<${#sub_list[@]}; i++ )); do
        name=${video_list[i]%.*}
        mv "${sub_list[i]}" "${name}".srt
    done
    echo -e "$F_OK"

}  # ----------  end of function rename_subtitles_in_current_folder  ----------




#===============================================================================
# Beginning of script work
#===============================================================================

echo -e "$BLD$SCRIPT_NAME v$SCRIPT_VERSION"
echo -e "$F_SEP"

#----------------------------------------

get_files
get_video_files
get_srt_files

video_count=${#video_list[@]}
subtitle_count=${#sub_list[@]}

if [[ $subtitle_count -gt $video_count ]]; then
    echo "$F_ERR$SCRIPT_RUN: ERROR: More subtitles than videos."
    exit 255
fi

rename_subtitles_in_current_folder

#----------------------------------------

echo -e "${F_SCR}Quiting..." 
exit 0

